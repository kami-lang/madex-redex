"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[8461],{91093:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"getting_started/passes","title":"Passes","description":"ReDex has a large set of optimization passes that is constantly evolving.","source":"@site/docs/getting_started/passes.md","sourceDirName":"getting_started","slug":"/getting_started/passes","permalink":"/docs/getting_started/passes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"passes","title":"Passes","sidebar_position":3},"sidebar":"mySidebar","previous":{"title":"Configuring ReDex","permalink":"/docs/getting_started/configuring"},"next":{"title":"Usage","permalink":"/docs/getting_started/usage"}}');var a=n(74848),t=n(28453);const r={id:"passes",title:"Passes",sidebar_position:3},l=void 0,o={},c=[{value:"AccessMarkingPass",id:"accessmarkingpass",level:2},{value:"AnnoKillPass",id:"annokillpass",level:2},{value:"BridgeSynthInlinePass",id:"bridgesynthinlinepass",level:2},{value:"CheckBreadcrumbsPass",id:"checkbreadcrumbspass",level:2},{value:"ClassMergingPass",id:"classmergingpass",level:2},{value:"ConstantPropagationPass",id:"constantpropagationpass",level:2},{value:"CopyPropagationPass",id:"copypropagationpass",level:2},{value:"DedupBlocksPass",id:"dedupblockspass",level:2},{value:"DelSuperPass",id:"delsuperpass",level:2},{value:"FinalInlinePassV2",id:"finalinlinepassv2",level:2},{value:"LocalDcePass",id:"localdcepass",level:2},{value:"MethodDevirtualizationPass",id:"methoddevirtualizationpass",level:2},{value:"ObfuscatePass",id:"obfuscatepass",level:2},{value:"OptimizeEnumsPass",id:"optimizeenumspass",level:2},{value:"OriginalNamePass",id:"originalnamepass",level:2},{value:"PeepholePass",id:"peepholepass",level:2},{value:"ReBindRefsPass",id:"rebindrefspass",level:2},{value:"ReduceGotosPass",id:"reducegotospass",level:2},{value:"RegAllocPass",id:"regallocpass",level:2},{value:"RemoveBuildersPass",id:"removebuilderspass",level:2},{value:"RemoveInterfacePass",id:"removeinterfacepass",level:2},{value:"RemoveUnreachablePass",id:"removeunreachablepass",level:2},{value:"RemoveUnusedFieldsPass",id:"removeunusedfieldspass",level:2},{value:"RemoveUnusedArgsPass",id:"removeunusedargspass",level:2},{value:"RenameClassesPassV2",id:"renameclassespassv2",level:2},{value:"ReorderInterfacesDeclPass",id:"reorderinterfacesdeclpass",level:2},{value:"ResultPropagationPass",id:"resultpropagationpass",level:2},{value:"ShortenSrcStringsPass",id:"shortensrcstringspass",level:2},{value:"MethodInlinePass",id:"methodinlinepass",level:2},{value:"SingleImplPass",id:"singleimplpass",level:2},{value:"StaticReloPassV2",id:"staticrelopassv2",level:2},{value:"StringConcatenatorPass",id:"stringconcatenatorpass",level:2},{value:"StripDebugInfoPass",id:"stripdebuginfopass",level:2}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"ReDex has a large set of optimization passes that is constantly evolving.\nInformation in this document may be outdated, inspect the code if necessary."}),"\n",(0,a.jsx)(s.h2,{id:"accessmarkingpass",children:"AccessMarkingPass"}),"\n",(0,a.jsx)(s.p,{children:"Final objects and private methods can be optimized more aggressively than\nvirtual objects and public methods."}),"\n",(0,a.jsxs)(s.p,{children:["Devirtualization can result in [NullPointerException]. Two Redex passes perform\ndevirtualization of methods: ",(0,a.jsx)(s.code,{children:"AccessMarkingPass"})," devirtualizes methods not using\n",(0,a.jsx)(s.code,{children:"this"}),". ",(0,a.jsx)(s.a,{href:"#methodinlinepass",children:(0,a.jsx)(s.code,{children:"MethodInlinePass"})})," inlines monomorphic virtual\ncalls."]}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.a,{href:"/docs/getting_started/configuring",children:"app's config file"})," can override ",(0,a.jsx)(s.code,{children:"AccessMarkingPass"})," behavior.\n",(0,a.jsx)(s.code,{children:"finalize_methods"}),", ",(0,a.jsx)(s.code,{children:"finalize_unwritten_fields"}),", ",(0,a.jsx)(s.code,{children:"finalize_classes"}),", and\n",(0,a.jsx)(s.code,{children:"privatize_methods"})," default to ",(0,a.jsx)(s.code,{children:"true"}),". ",(0,a.jsx)(s.code,{children:"finalize_written_fields"})," defaults to ",(0,a.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'"AccessMarkingPass": {\n  "finalize_written_fields": true\n},\n'})}),"\n",(0,a.jsx)(s.p,{children:"Pass ordering dependencies:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"AccessMarkingPass"})," should be run early as it enables other optimizations."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#methoddevirtualizationpass",children:(0,a.jsx)(s.code,{children:"MethodDevirtualizationPass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"annokillpass",children:"AnnoKillPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"AnnoKillPass"}),' originally removed only annotations with no static references in\nthe code--"build-visible" annotations. It was expanded to remove annotations\nreferenced statically, but not used at runtime--"runtime-visible" annotations.']}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"AnnoKillPass"})," reads configuration options from the ",(0,a.jsx)(s.a,{href:"/docs/getting_started/configuring",children:"app's config\nfile"})," specifying annotations to be kept or killed. An additional\noption specifies whether Redex should attempt to match signatures for removal."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'"AnnoKillPass" : {\n  "keep_annos": [\n    "Landroid/view/ViewDebug$CapturedViewProperty;",\n    "Landroid/view/ViewDebug$ExportedProperty;"\n  ],\n  "kill_bad_signatures" : true,\n  "kill_annos" : [\n    "Lcom/google/inject/BindingAnnotation;"\n  ]\n},\n'})}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#systemannokillpass",children:(0,a.jsx)(s.code,{children:"SystemAnnoKillPass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"bridgesynthinlinepass",children:"BridgeSynthInlinePass"}),"\n",(0,a.jsx)(s.p,{children:"As the name suggests BridgeSynthInlinePass removes bridge and synthetic methods by inlining them."}),"\n",(0,a.jsxs)(s.p,{children:["Bridge methods are created by the ",(0,a.jsx)(s.code,{children:"javac"})," compiler as part of\ntype erasure for covariant generics."]}),"\n",(0,a.jsx)(s.p,{children:"Example of a bridge method in pseudo-bytecode:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"check-cast*   (for checking covariant arg types)\ninvoke-{direct,virtual,static}  bridged-method\nmove-result\nreturn\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"BridgeSynthInlinePass"}),' inlines the target of the bridging, the "bridgee", into the bridge\nmethod by replacing the ',(0,a.jsx)(s.code,{children:"invoke-"})," and adjusting check-casts as needed. The\nbridgee can then be deleted."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"BridgeSynthInlinePass"})," also removes synthetic methods introduced by ",(0,a.jsx)(s.code,{children:"javac"}),". ",(0,a.jsx)(s.code,{children:"javac"})," generates\nthese methods because while Java allows inner classes or nested classes, DEX\nbytecode does not. Inner classes, like ",(0,a.jsx)(s.code,{children:"class Delta"})," in this example, are\npromoted to top-level classes in the DEX bytecode."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public class Gamma {\n    public Gamma(int v) {\n        x = v;\n    }\n    private int x;\n\n    public class Delta {\n        public int doublex() {\n            return 2*x;\n        }\n    }\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"javac"})," generates a synthetic method that allows access to fields, methods, and\nconstructors in the promoted class. ",(0,a.jsx)(s.code,{children:"SynthPass"})," effectively removes these synthetic methods,\nreplacing them with a direct access to the field or call to the method or\nconstructor."]}),"\n",(0,a.jsx)(s.p,{children:"The general limitations and the cost model of the inliner applies. As a result, some bridge and synthetic method inlining opportunities might not be acted upon, e.g. when it would result in API-level violations, or an overall size increase."}),"\n",(0,a.jsx)(s.h2,{id:"checkbreadcrumbspass",children:"CheckBreadcrumbsPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"CheckBreadcrumbsPass"})," validates Redex codegen against leftover references to\ndeleted types, methods, or fields."]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Verifies that there are no references to a deleted class definition remaining\nin DEX files (essentially an ",(0,a.jsx)(s.code,{children:"internal"})," class that is not in scope)."]}),"\n",(0,a.jsx)(s.li,{children:"Verifies that the target of a field and method reference exists on the class\nit is defined on."}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Redex will warn if it finds dangling references or illegal references to\nentities."}),"\n",(0,a.jsx)(s.h2,{id:"classmergingpass",children:"ClassMergingPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"ClassMergingPass"})," shrinks the size of code generated by some frameworks. These\ntools produce large amounts of Java code for each component. The code generated\nfor different component types often shares the same structure, differing only by\nthe type of the component."]}),"\n",(0,a.jsx)(s.p,{children:'Class Merging identifies pieces of generated code that have the same "shape".\nErasing the types that differ allows the pieces of generated code to be merged.'}),"\n",(0,a.jsx)(s.h2,{id:"constantpropagationpass",children:"ConstantPropagationPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"ConstantPropagationPass"})," substitutes the values of constants into expressions\nat compile time. Constant propagation can eliminate multiple expressions,\nresulting in a constant load."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"ConstantPropagationPass"})," does a whole program analysis to replace instructions\nwith single destination registers with constant loads. The analysis is run\niteratively until a fixed point or configurable limit is reached."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"CostantPropagationPass"})," should be run before dead code elimination (DCE) passes\nas it can create dead code."]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#localdcepass",children:(0,a.jsx)(s.code,{children:"LocalDCEPass"})})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#removeunreachablepass",children:(0,a.jsx)(s.code,{children:"RemoveUnreachablePass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"copypropagationpass",children:"CopyPropagationPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"CopyPropagationPass"})," removes writes of duplicated values to registers in a\nbasic block. If value ",(0,a.jsx)(s.code,{children:"A"})," and value ",(0,a.jsx)(s.code,{children:"B"})," are aliases, then any moves between\nthese registers are unnecessary and can be eliminated. Duplicated source\nregisters can also be deduplicated."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"CopyPropagationPass"})," can also remove duplicated instructions if the source and\nthe destination are aliased."]}),"\n",(0,a.jsxs)(s.p,{children:["Example: ",(0,a.jsx)(s.code,{children:"v0"})," and ",(0,a.jsx)(s.code,{children:"v1"})," contain the same value and can be treated locally as\naliases:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"const v0, 0\nconst v1, 0\ninvoke-static v0 foo\ninvoke-static v1 bar\n"})}),"\n",(0,a.jsx)(s.p,{children:"can be transformed into"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"const v0, 0\ninvoke-static v0 foo\ninvoke-static v0 bar\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"CopyPropagationPass"})," should be run before dead code elimination (DCE) passes as\nit can create dead code."]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#localdcepass",children:(0,a.jsx)(s.code,{children:"LocalDCEPass"})})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#removeunreachablepass",children:(0,a.jsx)(s.code,{children:"RemoveUnreachablePass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"dedupblockspass",children:"DedupBlocksPass"}),"\n",(0,a.jsx)(s.p,{children:"Dedup blocks inside of a method. Duplicated blocks are those with the same code\nand the same successor. Duplicated blocks can have different predecessors."}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"DedupBlocksPass"})," identifies one of the blocks as the canonical version, then\nredirects all predecessors to the canonical block. The pass currenly only\nidentifies blocks with a single successor, but in the future may identify blocks\nwith multiple sucessors."]}),"\n",(0,a.jsx)(s.p,{children:"Stack traces for deduplicated blocks will always report the same line number,\nbut the predecessor line numbers will be correct."}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"DedupBlocksPass"})," should be run after ",(0,a.jsx)(s.a,{href:"#interdexpass",children:(0,a.jsx)(s.code,{children:"InterDexPass"})}),"."]}),"\n",(0,a.jsx)(s.h2,{id:"delsuperpass",children:"DelSuperPass"}),"\n",(0,a.jsx)(s.p,{children:"DelSuperPass eliminates subclass methods that invoke the superclass method and\ntrivially return."}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"DelSuperPass"})," only optimizes virtual methods with the following\ncharacteristics:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"The subclass method must match the name and signature of the superclass method"}),"\n",(0,a.jsxs)(s.li,{children:["The subclass method must only invoke the superclass method and either return\n",(0,a.jsx)(s.code,{children:"void"})," or the result of the callee."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"DelSuperPass"})," also fixes up references to the removed subclass methods, making\nthem refer to the superclass method instead. Though ",(0,a.jsxs)(s.a,{href:"https://source.android.com/devices/tech/dalvik/dalvik-bytecode",children:["Dalvik's\n",(0,a.jsx)(s.code,{children:"invoke-virtual"})]}),"\nwould automatically resolve to the correct superclass method, doing this reduces\nthe number of method references in the Dex file and saves on space."]}),"\n",(0,a.jsx)(s.h2,{id:"finalinlinepassv2",children:"FinalInlinePassV2"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"FinalInlinePassV2"}),", or an instance field's value after ",(0,a.jsx)(s.code,{children:"<init>"}),", and inlines\nthe value in dex code. Note that this pass is separate from the ",(0,a.jsx)(s.code,{children:"MethodInline"}),"\nand ",(0,a.jsx)(s.code,{children:"SwitchInline"})," passes."]}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"DX"})," tool often introduces verbose bytecode sequences to initialize static\nfields in classes it generates. The ",(0,a.jsx)(s.code,{children:"encoded_value"})," equivalents are much more\ncompact. This pass determines the values of static fields after ",(0,a.jsx)(s.code,{children:"<clinit>"})," and\neliminates the redundant writes to the static field."]}),"\n",(0,a.jsxs)(s.p,{children:["This pass applies to both final and non-final static fields. For final statics\nit also inlines reads of the static field where possible, replacing them with\nconstant operations outside of ",(0,a.jsx)(s.code,{children:"<clinit>"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["For instance fields, the pass calculates the field's value after ",(0,a.jsx)(s.code,{children:"<init>"})," is\nfinished. It inlines reads of the instance field where possible."]}),"\n",(0,a.jsxs)(s.p,{children:["Unlike a static field, if an instance field were changed outside of ",(0,a.jsx)(s.code,{children:"<init>"}),", it\nmight have different values for different instances of the class. For classes\nwith multiple ",(0,a.jsx)(s.code,{children:"<init>"})," the instance field values might differ based on the\nconstructor. This pass does not inline instance fields that are:"]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["Modified outside of their class ",(0,a.jsx)(s.code,{children:"<init>"}),"."]}),"\n",(0,a.jsx)(s.li,{children:"In a class that have more than one constructor."}),"\n",(0,a.jsx)(s.li,{children:"Accessed by reflection or native code anywhere in code."}),"\n",(0,a.jsx)(s.li,{children:"Accessed in another method that is called inside of the constructor."}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Note that this pass does not inline the ",(0,a.jsx)(s.code,{children:"CharSequence"})," type for static or\ninstance fields because older Dalvik VMs cannot handle this class."]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#methodinlinepass",children:(0,a.jsx)(s.code,{children:"MethodInlinePass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"localdcepass",children:"LocalDcePass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"LocalDcePass"})," removes dead instructions in a method. Code is considered to be\n\"dead' if it has no side-effects and does not change its output registers. Code\nin a ",(0,a.jsx)(s.code,{children:"catch"})," block is considered live for the duration of the ",(0,a.jsx)(s.code,{children:"try"}),", as any\ninstruction in the ",(0,a.jsx)(s.code,{children:"try"})," block is assumed to be able to throw. Methods annotated\nwith ",(0,a.jsx)(s.code,{children:"@DoNotOptimize"})," are not considered for dead code elimination."]}),"\n",(0,a.jsx)(s.p,{children:"Dead code elimination (DCE) differs from RemoveUnreachable (RMU) in two ways:\nfirst, RMU works from global roots (at the scope of Class/Method/Field) whereas\nDCE works at the function scope. Second, DCE removes code that does not change\nstate, for example, a store to a memory address that is not read in the scope of\nthe block, whereas RMU removes code that is unreachable regardless of its effect\non state."}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#removeunreachablepass",children:"RemoveUnreachablePass"})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"methoddevirtualizationpass",children:"MethodDevirtualizationPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"MethodDevirtualizationPass"})," converts virtual methods with single\nimplementation to static dmethods."]}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.a,{href:"/docs/getting_started/configuring",children:"app's config file"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'"MethodDevirtualizationPass" : {\n  "staticize_vmethods_not_using_this" : true,\n  "staticize_dmethods_not_using_this" : true\n},\n'})}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#accessmarkingpass",children:(0,a.jsx)(s.code,{children:"AccessMarkingPass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"obfuscatepass",children:"ObfuscatePass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"ObfuscatePass"})," pass obfuscates method and field names. ",(0,a.jsx)(s.code,{children:"RenameClassesPassV2"}),"\nobfuscates class names."]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#renameclassespassv2",children:(0,a.jsx)(s.code,{children:"RenameClassesPassV2"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"optimizeenumspass",children:"OptimizeEnumsPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"OptimizeEnumsPass"})," does two things to make use of ",(0,a.jsx)(s.code,{children:"Enum"})," classes more\nefficient. It optimizes the use of ",(0,a.jsx)(s.code,{children:"Enum"})," values in ",(0,a.jsx)(s.code,{children:"switch"})," tables and replaces\nsome uses of ",(0,a.jsx)(s.code,{children:"Enum"})," values with ",(0,a.jsx)(s.code,{children:"Integer"})," singletons."]}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"javac"})," compiler creates ",(0,a.jsx)(s.a,{href:"https://source.android.com/devices/tech/dalvik/dalvik-bytecode",children:"Dalvik packed\nswitch"})," tables\nthat contain a generated anonymous class. ",(0,a.jsx)(s.code,{children:"OptimizeEnumPass"})," replaces these\npacked ",(0,a.jsx)(s.code,{children:"switch"})," statements with lookups based on the ",(0,a.jsx)(s.code,{children:"Enum"})," ordinal itself. Note\nthat this optimization does not work with ProGuard obfuscation enabled. ProGuard\ncan rewrite ",(0,a.jsx)(s.code,{children:"Enum"})," value names such that they no longer match the ",(0,a.jsx)(s.code,{children:"Enum"})," class\nname."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"OptimizeEnumsPass"})," also replaces some uses of an ",(0,a.jsx)(s.code,{children:"Enum"})," with a boxed ",(0,a.jsx)(s.code,{children:"Integer"}),"\nsingleton and keeps the runtime behavior unchanged at the same time."]}),"\n",(0,a.jsxs)(s.p,{children:["The pass does not guarantee to erase all the enums, perf sensitive code should\nnever use enums. An ",(0,a.jsx)(s.code,{children:"Enum"})," is not optimizable if it is:"]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["An abstract ",(0,a.jsx)(s.code,{children:"Enum"}),"."]}),"\n",(0,a.jsx)(s.li,{children:"Reflectively used."}),"\n",(0,a.jsx)(s.li,{children:"Contains an instance field that is not a primitive."}),"\n",(0,a.jsx)(s.li,{children:"Contains non-final instance fields."}),"\n",(0,a.jsxs)(s.li,{children:["Cast to any other types, like ",(0,a.jsx)(s.code,{children:"java.lang.Object"}),", ",(0,a.jsx)(s.code,{children:"java.lang.Enum"}),",\n",(0,a.jsx)(s.code,{children:"java.io.Serializable"}),", ",(0,a.jsx)(s.code,{children:"java.lang.Comparable"})]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"originalnamepass",children:"OriginalNamePass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'"OriginalNamePass" : {\n  "hierarchy_roots" : [\n    "Ljava/lang/Runnable;"\n  ]\n},\n'})}),"\n",(0,a.jsx)(s.p,{children:"Redex renames classes for performance reasons. Renaming can result in different\nclass names in debug and release builds, which results in mismatches in logging.\nAlso, some system functions should not be renamed."}),"\n",(0,a.jsxs)(s.p,{children:["An alternative is to use ",(0,a.jsx)(s.code,{children:"OriginalClassName.getSimpleName()"})," for logging.\n",(0,a.jsx)(s.code,{children:"OriginalNamePass"})," is preferred as is does not significantly increase the APK\nsize."]}),"\n",(0,a.jsx)(s.h2,{id:"peepholepass",children:"PeepholePass"}),"\n",(0,a.jsxs)(s.p,{children:["Replace small code patterns with a more efficient pattern. The optimization\nmatches known patterns for replacement. It essentially performs a string search\nof the code for known inefficient sequences and replaces them with more\nefficient code. ",(0,a.jsx)(s.code,{children:"PeepholePass"})," will not replace patterns that span a basic block\nboundary. ",(0,a.jsx)(s.code,{children:"PeepholePass"})," can remove no-op function calls such as redundant moves\nand appends of null strings."]}),"\n",(0,a.jsx)(s.p,{children:"Peephole pass should be run early."}),"\n",(0,a.jsx)(s.h2,{id:"rebindrefspass",children:"ReBindRefsPass"}),"\n",(0,a.jsx)(s.p,{children:"Rebind references to their most abstract type."}),"\n",(0,a.jsxs)(s.p,{children:["The number of methods in a DEX file is limited to 64K. Method definitions (defs)\nand references (refs) both count against this limit. The class scope in an\ninheritance situation can create needless method refs. Calls based on the\nsubclassed methods create unnecessary method refs for the subclass. This is\nespecially true when calls are made through the implicit ",(0,a.jsx)(s.code,{children:"this"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["For example, you have a class specialized on ",(0,a.jsx)(s.code,{children:"<n>"})," with a method that calls\n",(0,a.jsx)(s.code,{children:"Object.equals(Object)"}),". All of these calls create a ref ",(0,a.jsx)(s.code,{children:"X<n>.equals(Object)"}),",\neach of them counting against the 64K limit. Rebinding them lower in the\nhierarchy reduces the number of unique refs."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"class X<n>\n{\n    public void foo<n>(Object o)\n    {\n        ...\n        if (equals(o) {...}\n        ...\n    }\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"ReBindRefsPass"})," rebinds all ",(0,a.jsx)(s.code,{children:"invoke-virtual"})," to the base def of the virtual\nscope. For ",(0,a.jsx)(s.code,{children:"invoke-interface"}),", it rebinds to the first interface method def. The\noptimization is only done as long as there is no change in method visibility: we\nwalk down the hiearchy as long as the method is public. ",(0,a.jsx)(s.code,{children:"ReBindRefsPass"}),"\ndrastically reduces the number of methods defined in DEX files."]}),"\n",(0,a.jsx)(s.h2,{id:"reducegotospass",children:"ReduceGotosPass"}),"\n",(0,a.jsx)(s.p,{children:"Reduces gotos in two ways:"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsx)(s.li,{children:"When a conditional branch would fallthrough to a block that has multiple\nsources, and the branch target only one has one, invert condition and swap\nbranch and goto target. This reduces the need for additional gotos and\nmaximizes the fallthrough efficiency."}),"\n",(0,a.jsx)(s.li,{children:"It replaces gotos that eventually simply return by return instructions.\nReturn instructions tend to have a smaller encoding than goto instructions,\nand tend to compress better due to less entropy (no offset)."}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Example, inverting this conditional will eliminate a ",(0,a.jsx)(s.code,{children:"goto"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"(const v2 0)\n\n(if-eqz v0 :true)\n(:back_jump_target)\n\n(return v2)\n\n(:true)\n(const v2 1)\n(goto :back_jump_target)\n"})}),"\n",(0,a.jsx)(s.h2,{id:"regallocpass",children:"RegAllocPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"RegAllocPass"}),' does register allocation: the process of allocating variables\ninto the available physical registers. The goal of register allocation is to\navoid "spilling", that is, moving values from registers into memory.']}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"RegAllocPass"})," uses a standard graph-coloring register allocator algorithm,\nknown as the Chaitin-Briggs algorithm."]}),"\n",(0,a.jsx)(s.h2,{id:"removebuilderspass",children:"RemoveBuildersPass"}),"\n",(0,a.jsx)(s.p,{children:"Remove builder invocations. A trivial builder is one that:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Doesn't escape the stack (",(0,a.jsx)(s.code,{children:"this"})," is never passed to a method not in this\ninstance, stored in a field, or returned)"]}),"\n",(0,a.jsx)(s.li,{children:"Has no static methods"}),"\n",(0,a.jsx)(s.li,{children:"Has no static fields"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Unreferenced builders are left to be removed by RemoveUnreachablePass (RMU)."}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#removeunreachablepass",children:(0,a.jsx)(s.code,{children:"RemoveUnreachablePass"})})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#resultpropagationpass",children:(0,a.jsx)(s.code,{children:"ResultPropagationPass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"removeinterfacepass",children:"RemoveInterfacePass"}),"\n",(0,a.jsx)(s.p,{children:"The motivation of this pass is to remove a hierarchy of interfaces extending\neach others. The removal of the interfaces simplifies the type system and\nenables additional type system level optimizations."}),"\n",(0,a.jsx)(s.p,{children:"We remove each interface by replacing each invoke-interface site with a\ngenerated dispatch stub that models the interface call semantic at bytecode\nlevel. After that we remove the existing references to them from the\nimplementors and remove them completely. We start at the leaf level of the\ninterface hierarchy. After removing the leaf level, we iteratively apply the\nsame transformation to the now newly formed leaf level again and again until all\ninterfaces are removed."}),"\n",(0,a.jsxs)(s.p,{children:["Note that this is a critical pass for optimizing GraphQL generated fragment\nmodels. Aside from the fragment model classes themselves, the GraphQL tool chain\nalso generates a Java interface for each GraphQL fragment namely fragment\ninterface. The existence of these interfaces greatly complicates the type system\nof the generated GraphQL fragment models making merging the underlying model\nclasses virtually impossible. The other interface removal optimizations like\n",(0,a.jsx)(s.code,{children:"SingleImpl"})," as well as ",(0,a.jsx)(s.code,{children:"RemoveUnreachablePass"})," can address this issue to some\nextend. But they are not able to remove the majority of them.\n",(0,a.jsx)(s.code,{children:"RemoveInterfacePass"})," is capable of removing most of the fragment interfaces at\nthe expense of producing the above mentioned dispatch stubs. Doing so before\nClass Merging paves the way for maximizing the code size reduction we can achieve\nin Class Merging."]}),"\n",(0,a.jsx)(s.h2,{id:"removeunreachablepass",children:"RemoveUnreachablePass"}),"\n",(0,a.jsx)(s.p,{children:"Starting from the roots, recursively mark the other elements that the roots\nreference. Afterwards, it deletes all the unmarked elements."}),"\n",(0,a.jsx)(s.p,{children:"The pass has various powerful options, including:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"remove_no_argument_constructors"}),": Whether to remove argless constructors. They might be used to create instances via reflection, so the default is ",(0,a.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"relaxed_keep_class_members"}),': Only consider instance members as roots when their classes are either instantiable, i.e. have a callable constructor, or are "dynamically referenced". A class is "dynamically referenced" if it is mentioned in a Dalvik annotation signature, is referenced in a runtime-visibile annotation, appears in a string or a const-class instruction, is the declaring type of a native method, is present in a native library (lib/',(0,a.jsx)(s.em,{children:"/"}),'.so), has one of the configured "reflected_package_names". The default is ',(0,a.jsx)(s.code,{children:"false"})," for backwards compatibility."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"throw_propagation"}),": When reachable instructions invoke methods that cannot return (e.g. all possible target methods have no reachable return statement), then subsequent instructions will not be visited, and replaced with a ",(0,a.jsx)(s.code,{children:"unreachable"})," instruction. The default is ",(0,a.jsx)(s.code,{children:"false"})," for backwards compatibility."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"prune_uninstantiable_insns"}),": When reachable instructions access instance members of classes that can never be instantiated, then subsequent instructions will not be visited, and replaced with an instruction that throws a ",(0,a.jsx)(s.code,{children:"NullPointerException"}),". The default is ",(0,a.jsx)(s.code,{children:"false"})," for backwards compatibility."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"prune_uncallable_instance_method_bodies"}),": When an instance method can never be target of an invocation, even though we might need to keep the method for virtual scope order, or because of keep rules, then we can replace its body with an ",(0,a.jsx)(s.code,{children:"unreachable"})," instruction. This draws from the same instantiability knowledge that is used for the ",(0,a.jsx)(s.code,{children:"prune_uninstantiable_insns"})," option. The default is ",(0,a.jsx)(s.code,{children:"false"})," for backwards compatibility."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"prune_uncallable_virtual_methods"}),": In some cases, we don't need to keep the body of an uncallable method, but instead can make the method abstract, or remove it completely. The default is ",(0,a.jsx)(s.code,{children:"false"})," for backwards compatibility."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"prune_unreferenced_interfaces"}),": Removes interfaces that are not referenced anywhere in code except in ",(0,a.jsx)(s.code,{children:"implements"})," clauses. The default is ",(0,a.jsx)(s.code,{children:"false"})," for backwards compatibility."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["More information about ",(0,a.jsx)(s.code,{children:"RemoveUnreachablePass"})," is available in this [note on\nTeaching Reachability Analysis about Dependency Injection]."]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#localdcepass",children:(0,a.jsx)(s.code,{children:"LocalDcePass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"removeunusedfieldspass",children:"RemoveUnusedFieldsPass"}),"\n",(0,a.jsxs)(s.p,{children:["It's pretty much in the name. A lot of these unread fields are actually\n",(0,a.jsx)(s.code,{children:"javac"}),"-generated fields for inner classes. Notably, this turns non-static inner\nclasses into static ones where possible."]}),"\n",(0,a.jsx)(s.p,{children:"This pass occasionally causes issues because the app may have been relying on an\nunread field to stop the GC from deleting an object."}),"\n",(0,a.jsx)(s.h2,{id:"removeunusedargspass",children:"RemoveUnusedArgsPass"}),"\n",(0,a.jsx)(s.p,{children:"Removes unused parameters. Currently only works on non-virtual methods and\nvirtual methods that are not part of some overriding inheritance hierarchy."}),"\n",(0,a.jsx)(s.h2,{id:"renameclassespassv2",children:"RenameClassesPassV2"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"RenameClassesPassV2"}),' renames classes to shorter names such as "X.A1c", saving\nin APK size, obfuscating the code, and ordering classes to optimize performance\nof loading.']}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"RenameClassesPassV2"})," will not rename any class mentioned in resources, nor will\nit rename anything in blocklist either by direct class name or as part of\nan excluded package."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"RenameClassesPassV2"})," relies on the ",(0,a.jsx)(s.a,{href:"/docs/getting_started/configuring",children:"app's config file"}),", excluding\nof the class or hierarchy, or use of reflection."]}),"\n",(0,a.jsx)(s.p,{children:"Logview and bug reports are configured to automatically undo this renaming."}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#obfuscatepass",children:(0,a.jsx)(s.code,{children:"ObfuscatePass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"reorderinterfacesdeclpass",children:"ReorderInterfacesDeclPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"ReorderInterfacesDeclPass"})," list for each class by how frquently the Interfaces\nare called. The Interface list is searched linearly when an Interface is called,\nso calling an Interface at the list will be faster. An alphabetical sort is used\nfor tie-breaks in number of incoming calls to preserve consistency across\nClasses."]}),"\n",(0,a.jsx)(s.p,{children:"This pass could be improved by checking the number of incoming calls\ndynamically."}),"\n",(0,a.jsx)(s.h2,{id:"resultpropagationpass",children:"ResultPropagationPass"}),"\n",(0,a.jsx)(s.p,{children:"Refactor code, e.g.,"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"Text.create(context)\n    .clipToBounds(false)\n    .text(myText)\n"})}),"\n",(0,a.jsx)(s.p,{children:"to be as efficient as the less elegant equivalent version:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"Text.Builder b = Text.create(context);\nb.clipToBounds(false)\nb.text(myText)\n"})}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#removebuilderspass",children:"RemoveBuildersPass"})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"shortensrcstringspass",children:"ShortenSrcStringsPass"}),"\n",(0,a.jsx)(s.p,{children:"Replaces long filename strings with strings used elsewhere in the APK. This\nmunges the filename component of stack traces. Logview and bug reports\nautomatically reverse this for you."}),"\n",(0,a.jsx)(s.h2,{id:"methodinlinepass",children:"MethodInlinePass"}),"\n",(0,a.jsxs)(s.p,{children:["For example, in this code, if ",(0,a.jsx)(s.code,{children:"run"})," is inlined to ",(0,a.jsx)(s.code,{children:"main"})," and the access of ",(0,a.jsx)(s.code,{children:"bar"}),"\nthrows, the stack trace in ",(0,a.jsx)(s.code,{children:"main"})," will show a ",(0,a.jsx)(s.code,{children:"NullPointerException"})," at the\ndereference of ",(0,a.jsx)(s.code,{children:"this"})," instead of a call to ",(0,a.jsx)(s.code,{children:"run"}),"."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"class Foo {\n  private String bar;\n  public void run() {\n    System.out.println(bar);\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Foo foo = null;\n    foo.run();\n  }\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"MethodInlinePass"})," will not inline a constructor as the Android verifier checks\nfor a call to ",(0,a.jsx)(s.code,{children:"<init>"})," before any access to the object."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"MethodInlinePass"})," cannot currently be run after ",(0,a.jsx)(s.a,{href:"#interdexpass",children:(0,a.jsx)(s.code,{children:"InterDexPass"})}),"."]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#finalinlinepassv2",children:(0,a.jsx)(s.code,{children:"FinalInlinePassV2"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"singleimplpass",children:"SingleImplPass"}),"\n",(0,a.jsx)(s.p,{children:"Removes interfaces with only a single implementation. Any classes referring to\nthe interface will now refer to the implementation instead. This can cause minor\nconfusion in stack traces."}),"\n",(0,a.jsx)(s.h2,{id:"staticrelopassv2",children:"StaticReloPassV2"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"StaticReloPassV2"})," relocates static fields and methods that only have one\ncalling class to that class. It improves the performance and reduces the app\nsize."]}),"\n",(0,a.jsx)(s.p,{children:"See related:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"#staticrelopass",children:(0,a.jsx)(s.code,{children:"StaticReloPass"})})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"stringconcatenatorpass",children:"StringConcatenatorPass"}),"\n",(0,a.jsx)(s.p,{children:"Reduce string operations as well as reducing the number of strings that need\nto be loaded."}),"\n",(0,a.jsxs)(s.p,{children:["Here's an example ",(0,a.jsx)(s.code,{children:"<clinit>"})," method ",(0,a.jsx)(s.code,{children:"StringConcatenationPass"})," will optimize:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'public static final String PREFIX = "foo";\npublic static final String CONCATENATED = PREFIX + "bar";\n'})}),"\n",(0,a.jsx)(s.p,{children:"The output code should be equivalent to:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'public static final PREFIX = "foo";\npublic static final CONCATENATED = "foobar";\n'})}),"\n",(0,a.jsx)(s.p,{children:"This is a targeted optimization that is only performed on static initializers\nwith many string concatenations."}),"\n",(0,a.jsx)(s.h2,{id:"stripdebuginfopass",children:"StripDebugInfoPass"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"StripDebugInfoPass"})," removes debug information for instructions that will\nnever throw. As debug positions can correspond to multiple instructions, we need\nto check that none of the instructions will throw. Also, Redex won't strip the\nfirst piece of debug information in a function to preserve the accuracty of\nsampling profiles and ANR stack traces."]}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.a,{href:"/docs/getting_started/configuring",children:"app's config file"})," can direct ",(0,a.jsx)(s.code,{children:"StripDebugInfoPass"})," removals at a\nmore granular level:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'"StripDebugInfoPass" : {\n  "drop_all_dbg_info" : "0",\n  "drop_local_variables" : "1",\n  "drop_line_numbers" : "0",\n  "drop_src_files" : "0",\n  "use_allowlist" : "0",\n  "cls_allowlist" : [],\n  "method_allowlist" : [],\n  "drop_prologue_end" : "1",\n  "drop_epilogue_begin" : "1",\n  "drop_all_dbg_info_if_empty" : "1",\n  "drop_synth_aggressive" : "0",\n  "drop_line_numbers_preceeding_safe" : "1"\n},\n'})}),"\n",(0,a.jsx)(s.p,{children:"Pass ordering dependencies:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"StripDebugInfoPass"})," should be run early as removal of the debug info should\nmake other passes faster."]}),"\n",(0,a.jsxs)(s.li,{children:["Inlining complicates the flow graph for debug info. ",(0,a.jsx)(s.code,{children:"StripDebugInfoPass"}),"\nshould be run before any inlining passes, and will not optiimize if inlining\nhas been performed."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);