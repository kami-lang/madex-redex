"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[1824],{86966:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"getting_started/installation","title":"Installation","description":"Dependencies","source":"@site/docs/getting_started/installation.md","sourceDirName":"getting_started","slug":"/getting_started/installation","permalink":"/docs/getting_started/installation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"installation","title":"Installation","sidebar_position":1},"sidebar":"mySidebar","previous":{"title":"Getting Started","permalink":"/docs/getting_started/"},"next":{"title":"Configuring ReDex","permalink":"/docs/getting_started/configuring"}}');var t=i(74848),d=i(28453);const l={id:"installation",title:"Installation",sidebar_position:1},r=void 0,o={},a=[{value:"Dependencies",id:"dependencies",level:2},{value:"macOS",id:"macos",level:3},{value:"Ubuntu/Debian (64-bit)",id:"ubuntudebian-64-bit",level:3},{value:"Ubuntu 18.04+, Debian 10(Buster)+",id:"ubuntu-1804-debian-10buster",level:4},{value:"Experimental: Windows (64-bit) with MSYS2",id:"experimental-windows-64-bit-with-msys2",level:3},{value:"Experimental: Windows 10 (64-bit)",id:"experimental-windows-10-64-bit",level:3},{value:"Download, Build and Install",id:"download-build-and-install",level:2},{value:"Experimental: Windows (64-bit) with MSYS2",id:"experimental-windows-64-bit-with-msys2-1",level:3},{value:"Experimental: CMake for Mac, Linux, and Windows",id:"experimental-cmake-for-mac-linux-and-windows",level:3},{value:"Test",id:"test",level:2},{value:"Dependencies",id:"dependencies-1",level:3},{value:"Execute",id:"execute",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsx)(n.p,{children:"We use package managers to resolve third-party library dependencies."}),"\n",(0,t.jsx)(n.h3,{id:"macos",children:"macOS"}),"\n",(0,t.jsx)(n.p,{children:"You will need Xcode with command line tools installed.  To get the command line tools, use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"xcode-select --install\n"})}),"\n",(0,t.jsx)(n.p,{children:"Install dependencies using homebrew:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"brew install autoconf automake libtool python3\nbrew install boost jsoncpp\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For App Bundle support ",(0,t.jsx)(n.code,{children:"brew install protobuf"})," is also required."]}),"\n",(0,t.jsx)(n.h3,{id:"ubuntudebian-64-bit",children:"Ubuntu/Debian (64-bit)"}),"\n",(0,t.jsxs)(n.p,{children:["Base requirements are automake & libtool, GCC >= 7, Python >= 3.6 and Boost >= 1.71.0, as well as\ndevelopment versions of ",(0,t.jsx)(n.code,{children:"iberty"}),", ",(0,t.jsx)(n.code,{children:"jemalloc"}),", ",(0,t.jsx)(n.code,{children:"jsoncpp"}),", ",(0,t.jsx)(n.code,{children:"lz4"}),", ",(0,t.jsx)(n.code,{children:"lzma"}),", and ",(0,t.jsx)(n.code,{children:"zlib"}),". ",(0,t.jsx)(n.code,{children:"Protobuf"})," >= 3.0 is required if optimizing an App Bundle."]}),"\n",(0,t.jsx)(n.h4,{id:"ubuntu-1804-debian-10buster",children:"Ubuntu 18.04+, Debian 10(Buster)+"}),"\n",(0,t.jsx)(n.p,{children:"The minimum supported Ubuntu version is 18.04. The minimum supported Debian version is 10."}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.a,{href:"https://github.com/facebook/redex/blob/master/setup_oss_toolchain.sh",children:"convenience script"}),"\nwill set up the build environment. This may include downloading Python 3.6 and Boost 1.71.0\non older OS versions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo ./setup_oss_toolchain.sh\n"})}),"\n",(0,t.jsxs)(n.p,{children:["After the script, please run ",(0,t.jsx)(n.code,{children:"sudo ldconfig"})," if it throws an error about loading shared libraries for running protoc."]}),"\n",(0,t.jsx)(n.h3,{id:"experimental-windows-64-bit-with-msys2",children:"Experimental: Windows (64-bit) with MSYS2"}),"\n",(0,t.jsxs)(n.p,{children:["You need ",(0,t.jsx)(n.a,{href:"https://www.msys2.org/#installation",children:"MSYS2"})," to build ",(0,t.jsx)(n.code,{children:"redex-all"})," (only MingW-w64 is supported) and ",(0,t.jsx)(n.a,{href:"https://www.python.org/downloads/windows/",children:"Python 3.6+"})," to run ",(0,t.jsx)(n.code,{children:"redex.py"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Install the build requirements in an MSYS or MingW64 shell:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pacman -Syuu && pacman -Sy make mingw-w64-x86_64-boost mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-jsoncpp mingw-w64-x86_64-make\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you do not use Git on Windows directly, you may install and use it under MSYS2:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pacman -S git\n"})}),"\n",(0,t.jsx)(n.h3,{id:"experimental-windows-10-64-bit",children:"Experimental: Windows 10 (64-bit)"}),"\n",(0,t.jsxs)(n.p,{children:["You need Visual Studio 2017. Visual Studio 2015 is also possible, but a couple of C++ compile errors need to be fixed. We use ",(0,t.jsx)(n.a,{href:"https://github.com/Microsoft/vcpkg",children:"vcpkg"})," for dependencies. Install vcpkg from their ",(0,t.jsx)(n.a,{href:"https://github.com/Microsoft/vcpkg",children:"document"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd c:\\tools\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n.\\bootstrap-vcpkg.bat\n.\\vcpkg integrate install\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Install necessary libraries with ",(0,t.jsx)(n.code,{children:"x64-windows-static"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:".\\vcpkg install boost --triplet x64-windows-static\n.\\vcpkg install zlib --triplet x64-windows-static\n.\\vcpkg install jsoncpp --triplet x64-windows-static\n.\\vcpkg install mman --triplet x64-windows-static\n"})}),"\n",(0,t.jsx)(n.h2,{id:"download-build-and-install",children:"Download, Build and Install"}),"\n",(0,t.jsx)(n.p,{children:"Get ReDex from GitHub:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git clone https://github.com/facebook/redex.git\ncd redex\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now, build ReDex using autoconf and make."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"autoreconf -ivf && ./configure && make\nsudo make install\n"})}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, to enable protobuf to support App Bundles, please use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"autoreconf -ivf && ./configure --enable-protobuf\nmake\nsudo make install\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For protobuf installed in the default system (Homebrew) search path (e.g /usr/local/bin), ",(0,t.jsx)(n.code,{children:"--enable-protobuf"})," is sufficient to trigger the build. Otherwise, specify the protobuf installation path for the autoconf:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"autoreconf -ivf\n./configure --with-protoc=/path/to/protoc --with-protolib=/path/to/protobuf_libs --with-protoheader=/path/to/protobuf_headers --enable-protobuf\nmake\nsudo make install\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["If your build machine has lots of RAM (on the order of 2-4GB per core), using\nMake parallelism can speed up the build (e.g., ",(0,t.jsx)(n.code,{children:"make -j4"}),"). However, the C++\ncompilers are very memory hungry and this needs to be finely tuned on many\nsystems."]})}),"\n",(0,t.jsx)(n.h3,{id:"experimental-windows-64-bit-with-msys2-1",children:"Experimental: Windows (64-bit) with MSYS2"}),"\n",(0,t.jsx)(n.p,{children:"The MSYS2 build relies on CMake. In a MingW64 shell:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# Assumes you want to use Git under MSYS. Else skip to below.\ngit clone https://github.com/facebook/redex.git\ncd redex\n# Assumes you are in the redex directory\nmkdir build-cmake\ncd build-cmake\ncmake -G "MSYS Makefiles" ..\nmake\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["If your build machine has lots of RAM (on the order of 2-4GB per core), using\nMake parallelism can speed up the build (e.g., ",(0,t.jsx)(n.code,{children:"make -j4"}),"). However, the C++\ncompilers are very memory hungry and this needs to be finely tuned on many\nsystems."]})}),"\n",(0,t.jsx)(n.p,{children:"You may check whether the produced binary seems in a working condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# In the MingW64 shell:\n./redex-all.exe --show-passes\n# Or in a standard Windows command prompt in the same directory\nredex-all.exe --show-passes\n"})}),"\n",(0,t.jsx)(n.p,{children:"The output should show a large number of included passes, at the time of writing 81."}),"\n",(0,t.jsxs)(n.p,{children:["Bundling the ",(0,t.jsx)(n.code,{children:"redex-all"})," binary with the python scripts is not supported on Windows. Manually copy the binary into the same directory as ",(0,t.jsx)(n.code,{children:"redex.py"})," and use ",(0,t.jsx)(n.code,{children:"redex.py"})," that way, or ensure that ",(0,t.jsx)(n.code,{children:"redex.py"})," is called with the ",(0,t.jsx)(n.code,{children:"--redex-binary"})," parameter:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"python redex.py --redex-binary PATH_TO_BINARY [...]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"experimental-cmake-for-mac-linux-and-windows",children:"Experimental: CMake for Mac, Linux, and Windows"}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, build using CMake. Note that the current ",(0,t.jsx)(n.code,{children:"CMakeLists.txt"})," only implements a rule for ",(0,t.jsx)(n.code,{children:"redex-all"})," binary. We will support installation and testing soon."]}),"\n",(0,t.jsx)(n.p,{children:"Generate build files. By default, it uses Makefile:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Assume you are in redex directory\nmkdir build-cmake\ncd build-cmake\n# .. is the root source directory of Redex\ncmake ..\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you prefer the ninja build system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cmake .. -G Ninja\n"})}),"\n",(0,t.jsxs)(n.p,{children:["On Windows, first, get ",(0,t.jsx)(n.code,{children:"CMAKE_TOOLCHAIN_FILE"})," from the output of ",(0,t.jsx)(n.code,{children:'"vcpkg integrate install"'}),", and then:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'cmake .. -G "Visual Studio 15 2017 Win64"\n -DVCPKG_TARGET_TRIPLET=x64-windows-static\n -DCMAKE_TOOLCHAIN_FILE="C:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Build ",(0,t.jsx)(n.code,{children:"redex-all"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cmake --build .\n"})}),"\n",(0,t.jsxs)(n.p,{children:["On Windows, you may build from Visual Studio. ",(0,t.jsx)(n.code,{children:"Redex.sln"})," has been generated."]}),"\n",(0,t.jsxs)(n.p,{children:["You should see a ",(0,t.jsx)(n.code,{children:"redex-all"})," executable, and the executable should show about 45 passes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"./redex-all --show-passes\n"})}),"\n",(0,t.jsx)(n.h2,{id:"test",children:"Test"}),"\n",(0,t.jsx)(n.p,{children:"Optionally, you can run our unit test suite.  We use gtest, which is automatically\ndownloaded when testing (or by invoking a setup script directly)."}),"\n",(0,t.jsx)(n.p,{children:"Note: Testing is currently not supported for CMake-based builds."}),"\n",(0,t.jsx)(n.h3,{id:"dependencies-1",children:"Dependencies"}),"\n",(0,t.jsxs)(n.p,{children:["Some ReDex tests require a Java environment and Android compiler tooling. If a JDK and the\nAndroid SDK are available on the machine, ensure that ",(0,t.jsx)(n.code,{children:"javac"})," and ",(0,t.jsx)(n.code,{children:"dx"})," are available on\nthe ",(0,t.jsx)(n.code,{children:"PATH"}),". Otherwise, install those dependencies."]}),"\n",(0,t.jsx)(n.p,{children:"For Ubuntu/Debian, this may for example be done with"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo apt-get install -y --no-install-recommends dalvik-exchange openjdk-8-jdk-headless\nsudo ln -s /usr/bin/dalvik-exchange /usr/local/bin/dx\n"})}),"\n",(0,t.jsx)(n.h3,{id:"execute",children:"Execute"}),"\n",(0,t.jsx)(n.p,{children:"Run tests with"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"make -j check\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["If your build machine has lots of RAM (on the order of 2-4GB per core), using\nMake parallelism can speed up the build and testing (e.g., ",(0,t.jsx)(n.code,{children:"make -j4"}),"). However,\nthe C++ compilers are very memory hungry and this needs to be finely tuned on\nmany systems."]})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);